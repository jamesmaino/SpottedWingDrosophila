---
title : GrowthMaps.jl example
author : Rafael Schouten, James Maino
---

# Growth rate calculation

In this example we will calculate the expected population growth rates of our species.

## Load some required packages

These packages take care of loading and plotting data, and handling sci units and dates.

```julia; results=hidden
using GrowthMaps, Plots, Unitful, UnitfulRecipes, Dates, Setfield, Statistics
using GeoData, ArchGDAL, NCDatasets
using Unitful: °C, K, cal, mol
basedir = ""
```


## Define model components

First we'll define the growth model using `SchoolfieldIntrinsicGrowth`, based on
Schoolfield (1981).

When defining model components, the first parameter is a `:symbol` for the
required raster layer in the source data.

```julia; results=hidden
p = 3.626804e-01
ΔH_A = 3.586625e4cal/mol
ΔH_H = 1.431237e5cal/mol
Thalf_H = 2.988454e2K
ΔH_L = -1.108988e5cal/mol
Thalf_L = 2.459949e2K
T_ref = K(25.0°C)
growthmodel = SchoolfieldIntrinsicGrowth(p, ΔH_A, ΔH_L, Thalf_L, ΔH_H, Thalf_H, T_ref)
growth = Layer(:surface_temp, growthmodel)
```

Now plot the growth rate curve:

```julia; results=hidden
temprange = (270.0:0.1:320.0)u"K"
p = plot(x -> GrowthMaps.rate(growth, x), temprange; label="growth rate")
```

We can try tweaking the fitting the model manually in a user interface.
Model components are immutable (for performance reasons), so we wrap the model
in a mutable wraper so we can use the results.
We parametrise the model over the same temperature range that we are plotting,
using the :surface_temp key that the model requires:

```julia; results=hidden
wrapper = ModelWrapper(growth)
tempdata=(surface_temp=temprange,)
manualfit!(wrapper, tempdata)
```


If you are happy with the result, you we can update extract the manual fit
to use to generate our growth rate maps:

```julia; results=hidden
growth = wrapper.model
```

Note that `manualfit!` will also work for a tuple of model components
that use the same source data, like `(growth, heatstress, coldstress)`.


## Load spatial data

Using the monthly aggregated SMAP dataset

```julia; results=hidden
using HDF5
smap_folder = "/home/raf/Data/drosophila/climate/SMAP_raw"
series = SMAPseries(smap_folder)
```

Otherwise get the series from tiff files, which is a little more hands-on:

```julia; results=hidden
# unzippedfolder = "/home/raf/Work/cesar/Raster/SMAP/SMAP_aggregated27km"
# filenames = readdir(unzippedfolder)
# wilting_paths =
#     joinpath.(Ref(unzippedfolder), filter(fn -> occursin(r"land_fraction_wilting", fn), filenames))
# surface_temp_paths =
#     joinpath.(Ref(unzippedfolder), filter(fn -> occursin(r"surface_temp", fn), filenames))
#
# # Get the dates covered in the data from the `surface_temp` files list, using regex:
# df = DateFormat("yyyymmddTHHMMSS")
# dates = DateTime.(replace.(surface_temp_paths, Ref(r".*_(\d+T\d+).tif" => s"\1")), Ref(df))

#= We know the "land_fraction_wilting" files are for the same dates.
Now we have the files and date seies, we can put together
a series of GeoData.jl stacks to load from disk while generating growth maps
The beauty of this approach is that we can use a lot of different source file types and
folder configurations without converting them or running out of RAM.
=#
# makestack(i) =
#     GDALstack((land_fraction_wilting=wilting_paths[i], surface_temp=surface_temp_paths[i]);
#               window=(Band(1),), usercrs=EPSG(4326))
# timedim = Ti(dates; mode=Sampled(Ordered(), Regular(Hour(3)), Intervals(Start())))
# stacks = [makestack(i) for i in 1:length(surface_temp_paths)]
# series = GeoSeries(stacks, (timedim,))
```

We can plot a layer from a file at some date in the series:

```julia; results=hidden
series[1][:surface_temp] |> plot
```

First we'll run this basic growth model:

```julia; results=hidden
growthrates = mapgrowth(growth, series;
    period=Month(1),
    nperiods=12,
    startdate=first(bounds(series, Ti))
)
growthrates[Ti(1:3:12)] |> plot
```

Now define some stressors:

```julia; results=hidden
# TODO: Why was this different to upperCTm/hearmort?
# Mortality rate per heat stress, °C/d 0.365

coldthresh = -10.0°C |> K  # Enriquez2017
coldmort = log(1.23) * K^-1 # Stephens2015
coldstress = Layer(:surface_temp, ColdStress(coldthresh, coldmort))

heatthresh = 30.0°C |> K # Kimura2004
heatmort = log(1.15) * K^-1
heatstress = Layer(:surface_temp, HeatStress(heatthresh, heatmort))

wiltthresh = 0.5
wiltmort = 4.6 # log(1.1) ??
wiltstress = Layer(:land_fraction_wilting, WiltStress(wiltthresh, wiltmort));
```


To build a more complex model, we can chain components together in a tuple,
and run them:

```julia; results=hidden
growthrates = mapgrowth((growth, heatstress, coldstress, wiltstress), series;
    period=Month(1),
    nperiods=12,
    startdate=first(bounds(series, Ti))
)
growthrates[Ti(1:3:12)] |> plot
```

## Compare with observation data

To compare out simulation with observations data, we'll load them
from a CSV file:

```julia; results=hiddeats
using CSV
csvfilename = "data/Oersted_occurrence.csv"
obs = CSV.File(csvfilename)
occurrence = collect(zip(obs.Longitude, obs.Latitude))
```

And scatter them on the growthrates map:
```julia; results=hiddeats
p = growthrates[Ti(1)] |> plot
scatter!(p, occurrence; markersize=4.0, markercolor=:green, markershape=:circle, label="obs")
```

# Parametrising models using interactive maps

If you need to adjust the model based on the distribution, this
can be done live in the interface, as with the manual fit.

Parametrising maps on large datasets is processor intensive, which inhibits
interactive fedback. To reduce processing, we can aggregate the spatial data to
a more manageable size.

You can experiment with the `agg` size to compromise between quality and render time. Large values
will look pixelated but will run fast.

```julia; results=hidden
agg = 10
aggseries = GeoData.aggregate(Center(), series, (Lon(agg), Lat(agg)), (:land_fraction_wilting, :surface_temp))
p = first(aggseries[1]) |> plot
scatter!(p, occurrence; markersize=4.0, markercolor=:green, markershape=:circle, label="obs")
```

As the combination of model is additive, we can prebuild parts of the model
we don't want to fit manually, which simplifies the interfaces and helps performance.
Seeing we allready fit the growth response to empiracle data, lets just fit
the stress responses to the map:

```julia; results=hidden
modelkwargs = (
    period=Month(12),
    nperiods=1,
    startdate=first(bounds(series, Ti))
)
wrapper = ModelWrapper(wiltstress, coldstress, heatstress)
mapfit!(wrapper, aggseries, modelkwargs;
        occurrence=occurrence,
        precomputed=mapgrowth(growth, aggseries; modelkwargs...),
        throttle=0.4,
        markershape=:circle,
        markercolor=:green,
        markeropacity=0.6
)
```

And get the updated model components from the wrapper:

```julia; results=hidden
wiltstress, coldstress, heatstress = wrapper.model
```

Now we will put together decent population growth maps
using the higher resolution data, with a monthly timestep:

```julia; results=hidden
growthrates = mapgrowth((growth, wiltstress, coldstress, heatstress), series;
    period=Month(1),
    nperiods=12,
    startdate=first(bounds(series, Ti))
);
plot(growthrates[Ti(1:3:12)]; clims=(0.0, 0.15), axis=false)
```

This is ready to use for projecting growthrates, or in a dispersal
simulation using Dispersal.jl. Lets save it as a NetCDF file:

```julia; results=hidden
write("data/growthrates.ncd", NCDarray, growthrates)
```

![Growth Rates](../assets/growthrates.png)

We can load the data again with:

```julia; results=hidden
growthrates = NCDarray("data/growthrates.ncd")

plot(growthrates[Ti(1:3:12)]; clims=(0.0, 0.11), axis=false, legend=false, title="")
savefig("output/population_growth_quarters.png")

meangrowth = @set mean(growthrates, dims=Ti).name = "Population growth rate potential (1/d)"
p = plot(meangrowth;
    clims=(0.0, 0.15),
    title="Fall Armyworm mean growth rate"
)
scatter!(p, occurrence;
    markersize=0.3,
    markeralpha=0.7,
    markerstrokecolor=:lightgreen,
    markercolor=:green,
    markershape=:circle,
    label="observations"
)
savefig("output/population_growth_mean.png")
```

Now, if you need to use the model for a serious application, run it on the real
SMAP dataset. GeoData.jl has a `SMAPseries()` constructor that will automate the
whole process of loading real SMAP HDF5 files.

```julia
using HDF5
smappath = "/home/raf/Storage/Data/SMAP/SMAP_L4_SM_gph_v4"
tstart, tstop = Date(2017), Date(2018)
days = (1, 4, 8, 12, 16, 20, 23, 27)
smapseries = SMAPseries(smappath)[Where(t -> t >= tstart && t < tstop && dayofmonth(t) in days)]
@assert length(smapseries) == 12 * 8 * 8
@time output = mapgrowth((fittedgrowth, wiltstress, coldstress, heatstress), smapseries;
                   period=Month(1),
                   nperiods=12,
                   subperiod=Day(1),
                   startdate=startdate
                  );

plot(output[Ti(1:3:12)]; axis=false)

savepath = joinpath(basedir, "growthrates.ncd")
write(savepath, NCDarray, output)

ncarray = NCDarray(savepath)
plot(ncarray[Ti(1:3:12)]; axis=false)
size(ncarray)
```
