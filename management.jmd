
```julia; results=hidden
using DataFrames, CSV
```

Setup the detection mechanism. Here we make it probabilistic,
meaning detections occur at some rate for a given population and
trap coverage. Then we define the detection model, generating a
random distribution of traps in cells containing crops of value.

```julia; results=hidden
# cropvalue is defined in impacts.jmd
meantraps = 0.3
trap_coverage = 0.1
detection_rate = 0.1
detectionmode = ProbabilisticDetection(detection_rate, trap_coverage)
detection = Detection(;
   population=:population,
   detected=:detected,
   sites=nothing,
   sitemask=cropmask,
   meantraps=meantraps,
   detectionmode=detectionmode,
)
```

Set the local and regional quarantine responses:

```julia; results=hidden
response_radius = 1
neighborhood = RadialNeighborhood{response_radius}()
locresponse = NeighborhoodResponse(;
   controlgrid=:detected,
   targetgrid=:loc,
   neighborhood=neighborhood
)
regionalresponse = RegionResponse(;
   controlgrid=:detected,
   targetgrid=:region,
   regions=states
)
```

Now that we handl human dispersal in an interaction, we need to
define a new dispersl ruleset that handles just local dispersal modes.

```julia; results=hidden
localdispersalruleset = Ruleset(
    localdisp, allee, growth;
    init=populationgrid,
    mask=boolmask,
    timestep=timestep,
);
```

Now we can define the initial conditions grids.

```julia; results=hidden
manageinit = (
   population=populationgrid,
   detected=detectedgrid,
   loc=localgrid,
   region=regiongrid
)
```

And define our ruleset:

```{julia; results=hidden}
detectionruleset = MultiRuleset(
   rulesets=(population=dispersalruleset,),
   interactions=(detection, locresponse, regionalresponse),
   init=manageinit,
   mask=data(boolmask),
   timestep=timestep,
)
```

We use GtkOuput to run the simulation.

```{julia; results=hidden}
using DynamicGridsGtk
tspan = DateTime(2020, 1), DateTime(2030, 12)
manageprocessor = LayoutProcessor([:population :detected; :loc :region], (viridis, jet, oranges, blues))
output = GtkOutput(manageinit;
   fps=100,
   store=true,
   processor=manageprocessor,
   minval=(minimum(growthrates_zeromissing), nothing, nothing, nothing),
   maxval=(1e6, nothing, nothing, nothing),
)
sim!(output, detectionruleset; tspan=tspan)
```

Now add an eradication model:

```{julia; results=hidden}
eradication = ControlledMap(
   targetgrid=:population,
   controlgrid=:loc,
   f=*,
   val=0.5,
)
eradicationruleset = MultiRuleset(
   rulesets=(population=dispersalruleset,),
   interactions=(detection, locresponse, regionalresponse, eradication),
   init=manageinit,
   mask=boolmask,
   timestep=timestep,
)
```

And re-run the simulation with eradication in local quarantine areas:

```{julia; results=hidden}
output = GtkOutput(manageinit;
   fps=100,
   store=true,
   processor=manageprocessor,
   minval=(zero(carrycap), nothing, nothing, nothing),
   maxval=(carrycap, nothing, nothing, nothing),
)
sim!(output, eradicationruleset; tspan=tspan)
```

Now add quarantine, for a full management simulation:

```{julia; results=hidden}
quarantine = QuarantinedHumanDispersal(;
   population=:population,
   local_quarantine=:loc,
   region_quarantine=:region,
   rule=humandisp,
   local_effect=0.02,
   region_effect=0.02,
)
managementruleset = MultiRuleset(
   rulesets=(population=localdispersalruleset,),
   interactions=(quarantine, detection, locresponse, regionalresponse, eradication),
   init=manageinit,
   mask=boolmask,
   timestep=timestep,
)
```


Now setup up a sensitivity analysis testing impacts of various management responses.

```{julia; results=hidden}
fullinit = (
   population=deepcopy(populationgrid),
   detected=deepcopy(detectedgrid),
   loc=deepcopy(localgrid),
   region=deepcopy(regiongrid),
   cost=deepcopy(costgrid),
)
```


```{julia; results=hidden}
fullprocessor = LayoutProcessor(
   [:population :detected; :loc :region; :cost nothing],
   (viridis, jet, oranges, blues, oranges)
)
fullruleset = build_fullruleset(eradication_effects[3], local_quarantine_effects[3], regional_quarantine_effects[3], trap_densities[3])
tspan = DateTime(2020, 1), DateTime(2030, 12)
output = GtkOutput(fullinit;
   fps=100,
   store=true,
   processor=fullprocessor,
   minval=(minimum(growthrates_zeromissing), nothing, nothing, nothing, 0.0),
   maxval=(1e6, nothing, nothing, nothing, 1e8),
)
sim!(output, fullruleset; tspan=tspan)
```

```{julia; results=hidden}
function build_fullruleset(eradication_effect, local_effect, regional_effect, trap_density)
   meantraps = 0.3
   detection_rate = 0.0041
   trap_coverage = 0.1
   detectionmode = ProbabilisticDetection(detection_rate, trap_coverage)
   trapsites = Biosecurity.detectionsites(cropmask, trap_density)
   localdispersalruleset = Ruleset(localdisp, allee, growth)
   detection = Detection(;
      population=:population,
      detected=:detected,
      sites=trapsites,
      detectionmode=detectionmode,
   )
   response_radius = 1
   locresponse = NeighborhoodResponse(;
      controlgrid=:detected,
      targetgrid=:loc,
      neighborhood=RadialNeighborhood{response_radius}(),
   )
   regionalresponse = RegionResponse(;
      controlgrid=:detected,
      targetgrid=:region,
      regions=states,
   )
   # Human disp is set up in spread.jmd
   quarantine = QuarantinedHumanDispersal(;
      population=:population,
      local_quarantine=:loc,
      region_quarantine=:region,
      rule=humandisp,
      local_effect=local_effect,
      region_effect=regional_effect,
   )
   eradication = ControlledMap(
      targetgrid=:population,
      controlgrid=:loc,
      f=*,
      val=eradication_effect,
   )

   # Costs
   croploss_cost = DynamicThresholdCost(;
       inputgrid=:population,
       costgrid=:cost,
       cellvalue=cropvalue,
       scalar=0.1 / 12, # Scale from years to months
       threshold=1e4,
   )
   #eradication_cost = DynamicCost(;
       #inputgrid=:loc,
       #costgrid=:cost,
       #cellvalue=1e5,
       #scalar=0.0, #TODO,
   #)
   local_quarantine_impact = 0.5
   local_quarantine_cost = DynamicCost(;
       inputgrid=:loc,
       costgrid=:cost,
       cellvalue=cropvalue,
       scalar=local_quarantine_impact / 12, # Scale from years to months
   )
   regional_quarantine_impact = 0.5
   regional_quarantine_cost = DynamicCost(;
       inputgrid=:region,
       costgrid=:cost,
       cellvalue=cropvalue,
       scalar= regional_quarantine_impact / 12, # Scale from years to months
   )
   costpertrap=1000.0
   trapcost = FixedCost(;
      cellvalue=trapsites,
      scalar=costpertrap / 12, # Scale from years to months
   )

   # Ruleset
   MultiRuleset(;
      rulesets=(
         population=localdispersalruleset,
         cost=Ruleset(trapcost),
      ),
      interactions=(
         quarantine,
         detection,
         locresponse,
         regionalresponse,
         croploss_cost,
         regional_quarantine_cost,
         local_quarantine_cost,
         eradication,
      ),
      init=fullinit,
      mask=boolmask,
      timestep=timestep
   )
end
```

```{julia; results=hidden}
tspan = DateTime(2020, 1), DateTime(2020, 12)
trange = tspan[1]:timestep:tspan[2]
nframes = length(trange)
local_quarantine_effects    = [0.0, 0.5, 0.99]
regional_quarantine_effects = [0.0, 0.5, 0.99]
trap_densities              = [0.1, 0.05, 0.01, 0.005, 0.001]
eradication_effects         = [0.0, 0.5, 0.99]
nreps = 20
detection_threshold = 1e4
mem = ReentrantLock() # For locking the dataframe while threading

sensitivity = [DataFrame(
   incursion = Symbol[],
   eradication = Float64[],
   local_quarantine = Float64[],
   regional_quarantine = Float64[],
   trap_density =  Float64[],
   replicate = Int[],
   area = Float64[],
   cost = Float64[],
) for thread in Threads.nthreads()]
# (loc, point) = first(zip(keys(incursionpoints), incursionpoints))
for (loc, point) in zip(keys(incursionpoints), incursionpoints),
    e in eradication_effects,
    l in local_quarantine_effects,
    r in regional_quarantine_effects,
    t in trap_densities
   println("running: ", (incursion=loc, eradication=e, loc_quarantine=l, reg_quarantine=r, trap_density=t, nreps=nreps))
   Threads.@threads for rep in 1:nreps
      output = ArrayOutput(fullinit, nframes)
      ruleset = buil_fullruleset(e, l, r, t)
      fullinit[:population] .= 0.0
      fullinit[:population][Lat(Near(point[1])), Lon(Near(point[2]))] = carrycap
      sim!(output, ruleset; tspan=tspan)
      area = count(x -> x > detection_threshold, output[end][:population])
      cost = sum(output[end][:cost])
      push!(sensitivity[Threads.threadid()], (loc, e, l, r, t, rep, area, cost))
   end
   yield()
end
for i in 1:Threads.nthreads()
   CSV.write("output/sensitivity$i.csv", sensitivity[i])
end
```

Plot using facets in R

```{julia; results=hidden}
using RCall
R"""
library(ggplot2)
library(dplyr)
library(magrittr)
"""

R"""
for (i in incursions)
   output %>%
   filter(incursion==i)
   group_by(eradication, local_quarantine, regional_quarantine, trap_density) %>%
   summarise(meanarea = mean(area),
                      meancost = mean(cost)) %>%
   ggplot(aes(trap_density, cost, color = eradication )) +
   geom_line() +
   facet_grid( local_quarantine ~ regional_quarantine )
   ggsave(paste0(i, ".png"))
end
"""
````

#fullprocessor = LayoutProcessor([:population :detected; :loc :region; :cost nothing], (viridis, jet, oranges, blues, oranges))
#output = GtkOutput(fullinit;
   #fps=100,
   #store=true,
   #processor=fullprocessor,
   #minval=(minimum(growthrates_zeromissing), nothing, nothing, nothing, 0.0),
   #maxval=(1e6, nothing, nothing, nothing, 1e8),
#)
# output.running = false
#local_quarantine_effects    = [0.5]
#regional_quarantine_effects = [0.5]
#eradication_effects         = [0.5]
#trap_density                = [0.01]
