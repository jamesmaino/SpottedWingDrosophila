
```julia; results=hidden
using DataFrames, CSV
```

Now that we handle human dispersal in an interaction, we need to
define a new dispersl ruleset that handles just local dispersal modes.

```julia; results=hidden
localdispersalruleset = Ruleset(
    localdisp, allee, growth;
    init=populationgrid,
    mask=boolmask,
    timestep=timestep,
);
```

Setup the detection mechanism. Here we make it probabilistic,
meaning detections occur at some rate for a given population and
trap coverage. Then we define the detection model, generating a
random distribution of traps in cells containing crops of value.

```julia; results=hidden
# cropvalue is defined in impacts.jmd
meantraps = 0.3
trap_coverage = 0.1
detection_rate = 0.1
detectionmode = ProbabilisticDetection(detection_rate, trap_coverage)
detection = Detection(;
   population=:population,
   detected=:detected,
   sites=nothing,
   sitemask=cropmask,
   meantraps=meantraps,
   detectionmode=detectionmode,
)
```

Set the local and juristiction quarantine responses:

```julia; results=hidden
response_radius = 1
neighborhood = RadialNeighborhood{response_radius}()
locresponse = NeighborhoodResponse(;
   controlgrid=:detected,
   targetgrid=:loc,
   neighborhood=neighborhood
)
juristictionresponse = RegionResponse(;
   controlgrid=:detected,
   targetgrid=:juristiction,
   regions=states
)
```

Now we can define the initial conditions grids.

```julia; results=hidden
manageinit = (
   population=populationgrid,
   detected=detectedgrid,
   loc=localgrid,
   juristiction=juristictiongrid
)
```

And define our ruleset:

```{julia; results=hidden}
detectionruleset = MultiRuleset(
   rulesets=(population=dispersalruleset,),
   interactions=(detection, locresponse, juristictionresponse),
   init=manageinit,
   mask=data(boolmask),
   timestep=timestep,
)
```

We use GtkOuput to run the simulation.

```{julia; results=hidden}
using DynamicGridsGtk
tspan = DateTime(2020, 1), DateTime(2030, 12)
manageprocessor = LayoutProcessor([:population :detected; :loc :juristiction], (viridis, jet, oranges, blues))
output = GtkOutput(manageinit;
   fps=100,
   store=true,
   processor=manageprocessor,
   minval=(minimum(growthrates_zeromissing), nothing, nothing, nothing),
   maxval=(1e6, nothing, nothing, nothing),
)
sim!(output, detectionruleset; tspan=tspan)
```

Now add an eradication model:

```{julia; results=hidden}
eradication = ControlledMap(
   targetgrid=:population,
   controlgrid=:loc,
   f=*,
   val=0.5,
)
eradicationruleset = MultiRuleset(
   rulesets=(population=dispersalruleset,),
   interactions=(detection, locresponse, juristictionresponse, eradication),
   init=manageinit,
   mask=boolmask,
   timestep=timestep,
)
count(growthmask)
```

And re-run the simulation with eradication in local quarantine areas:

```{julia; results=hidden}
output = GtkOutput(manageinit;
   fps=100,
   store=true,
   processor=manageprocessor,
   minval=(zero(carrycap), nothing, nothing, nothing),
   maxval=(carrycap, nothing, nothing, nothing),
)
sim!(output, eradicationruleset; tspan=tspan)
```

Now add quarantine, for a full management simulation:

```{julia; results=hidden}
quarantine = QuarantinedHumanDispersal(;
   population=:population,
   local_quarantine=:loc,
   juristiction_quarantine=:juristiction,
   rule=humandisp,
   local_effect=0.02,
   juristiction_effect=0.02,
)
managementruleset = MultiRuleset(
   rulesets=(population=localdispersalruleset,),
   interactions=(quarantine, detection, locresponse, juristictionresponse, eradication),
   init=manageinit,
   mask=boolmask,
   timestep=timestep,
)
```


Now setup up a sensitivity analysis testing impacts of various management responses.

```{julia; results=hidden}
function build_fullruleset(eradication_effect, local_effect, juristiction_effect, trap_density, trap_radius)
   detection_rate = 0.0041
   trap_coverage = 0.1
   trap_operation_cost = 1000.0
   juristiction_scalar = 0.5
   croploss_fraction = 0.1
   croploss_threshold = 1e4
   eradication_costperkm = 1000u"km^-2"
   cell_mean_traps = trap_density * cellkms

   detectionmode = ProbabilisticDetection(detection_rate, trap_coverage)
   localdispersalruleset = Ruleset(localdisp, allee, growth)
   detection = Biosecurity.DynamicDetection(;
      traps=:traps,
      detected=:detected,
      population=:population,
      detectionmode=detectionmode,
   )
   #locresponse = NeighborhoodResponse(;
      #controlgrid=:detected,
      #targetgrid=:loc,
      #neighborhood=RadialNeighborhood{response_radius}(),
   #)
   #juristictionresponse = RegionResponse(;
      #controlgrid=:detected,
      #targetgrid=:juristiction,
      #regions=states,
   #)
   settraps = Biosecurity.SetTraps(;
      detectedgrid=:detected,
      trapgrid=:traps,
      neighborhood=RadialNeighborhood{trap_radius}(),
      meantraps=cell_mean_traps,
   )
   # Human disp is set up in spread.jmd
   quarantine = QuarantinedHumanDispersal(;
      population=:population,
      local_quarantine=:detected,
      region_quarantine=:traps, # Hack - this is commented out in Bosecurity.jl
      rule=humandisp,
      local_effect=local_effect,
      region_effect=juristiction_effect,
   )
   eradication = ControlledMap(
      targetgrid=:population,
      controlgrid=:detected,
      f=*,
      val=1-eradication_effect,
   )

   # Costs
   croploss_cost = DynamicThresholdCost(;
       inputgrid=:population,
       costgrid=:cost,
       cellvalue=cropvalue,
       scalar=croploss_fraction / 12, # Scale from years to months
       threshold=croploss_threshold,
   )
   eradication_cost = DynamicCost(;
       inputgrid=:detected,
       costgrid=:cost,
       cellvalue=cellkms * eradication_costperkm / 12,
       scalar=1.0,
   )
   local_quarantine_cost = DynamicCost(;
       inputgrid=:detected,
       costgrid=:cost,
       cellvalue=cropvalue,
       scalar=local_effect / 12, # Convert from years to months (the timestep)
   )
   #juristiction_quarantine_cost = DynamicCost(;
         #inputgrid=:juristiction,
         #costgrid=:cost,
         #cellvalue=cropvalue,
         #scalar= juristiction_scalar * juristiction_effect / 12, # Scale from years to months
   #)
   trap_cost = DynamicCost(;
       inputgrid=:traps,
       costgrid=:cost,
       cellvalue=trap_operation_cost / 12, # Scale from years to months,
       scalar=1,
   )

   # Ruleset
   MultiRuleset(;
      rulesets=(
         population=localdispersalruleset,
      ),
      interactions=(
         settraps,
         detection,
         eradication,
         croploss_cost,
         local_quarantine_cost,
         trap_cost,
         quarantine,
      ),
      init=fullinit,
      mask=boolmask,
      timestep=timestep
   )
end
```

```{julia; results=hidden}
fullinit = (
   population=deepcopy(populationgrid),
   detected=deepcopy(detectedgrid),
   traps=deepcopy(trapgrid),
   cost=deepcopy(costgrid),
)
cellkms = (9u"km")^2
fullprocessor = LayoutProcessor(
   [:population :detected; :traps :cost],
   (viridis, jet, oranges, inferno)
)
```
Set up a Gtk output:

```{julia; results=hidden}
using DynamicGridsGtk
output = GtkOutput(fullinit;
   fps=20,
   store=true,
   processor=fullprocessor,
   minval=(zero(carrycap), nothing, 0, 0.0),
   maxval=(carrycap, nothing, 2, 1e6),
)
```

And run a simulation in it:

```{julia; results=hidden}
point = incursionpoints[:Brisbane]
fullinit[:population] .= 0.0
fullinit[:population][Lat(Near(point[1])), Lon(Near(point[2]))] = carrycap
fullinit[:cost] .= 0.0
init_trapgrid!(fullinit[:traps], incursionpoints)
#fullinit[:traps] .= rand(0:1, size(trapgrid)...)
#maximum(fullinit[:traps])
tspan = DateTime(2020, 1), DateTime(2045, 1)
trange = tspan[1]:timestep:tspan[2]
nframes = length(trange)

trap_density        = 0.001u"km^-2"
trap_radius          = 2
juristiction_effect = 0.5
local_effect        = 0.99
eradication_effect  = 0.5

fullruleset = build_fullruleset(eradication_effect, local_effect, juristiction_effect, trap_density, trap_radius)
sim!(output, fullruleset; tspan=tspan)
savegif("trap_feedback.gif", output)
```


Run replicates:

```{julia; results=hidden}
tspan = DateTime(2020, 1), DateTime(2022, 1)
trange = tspan[1]:timestep:tspan[2]
nframes = length(trange)
trapmask = growthmask

eradication_effects         = [0.0, 0.5, 0.99]
local_quarantine_effects    = [0.0, 0.5, 0.99]
#juristiction_quarantine_effects = [0.0, 0.5, 0.99]
trap_densities              = [0.01, 0.05, 0.1] .* u"km^-2"
trap_radii                  = [1, 2, 5]

nreps = 20
detection_threshold = 1e4

sensitivity = [DataFrame(
   incursion = Symbol[],
   eradication = Float64[],
   local_quarantine = Float64[],
   trap_density =  Float64[],
   trap_radii =  Int[],
   replicate = Int[],
   area = Float64[],
   cost = Float64[],
) for thread in 1:Threads.nthreads()]

#(lo, point) = :Brisbane, incursionpoints[:Brisbane]

for (loc, point) in zip(keys(incursionpoints), incursionpoints),
    (trapsource, trapmask) in ((:growth, growthmask),),#, (:crops, cropmask)),
    e in eradication_effects,
    l in local_quarantine_effects,
    t in trap_densities,
    r in trap_radii
   println("running: ", (incursion=loc, eradication=e, loc_quarantine=l, trap_radius=r, trap_density=t, nreps=nreps))
   Threads.@threads for rep in 1:nreps
      ruleset = build_fullruleset(e, l, 0.0, t, r)
      fullinit[:population] .= 0.0
      fullinit[:cost] .= 0.0
      fullinit[:population][Lat(Near(point[1])), Lon(Near(point[2]))] = carrycap
      trapgrid = init_trapgrid!(fullinit[:traps], incursionpoints)
      output = ArrayOutput(fullinit, nframes)
      sim!(output, ruleset; tspan=tspan)
      area = count(x -> x > 0.0, output[end][:population]) * cellkms / u"km^2"
      cost = sum(output[end][:cost])
      push!(sensitivity[Threads.threadid()], (loc, e, l, t*u"km^2", r, rep, area, cost))
   end
   yield()
end
CSV.write("output/sensitivity.csv", vcat(sensitivity...))
```

Plot using facets in R

```{julia; results=hidden}
using RCall
R"""
library(ggplot2)
library(dplyr)
library(magrittr)
"""

R"""
for (i in incursions)
   output %>%
   filter(incursion==i)
   group_by(eradication, local_quarantine, juristiction_quarantine, trap_density) %>%
   summarise(meanarea = mean(area),
                      meancost = mean(cost)) %>%
   ggplot(aes(trap_density, cost, color = eradication )) +
   geom_line() +
   facet_grid( local_quarantine ~ juristiction_quarantine )
   ggsave(paste0(i, ".png"))
end
"""
```

```{julia; results=hidden}
using DynamicGridsInteract
output = InteractOutput(fullinit, fullruleset;
   fps=100,
   store=true,
   processor=fullprocessor,
   minval=(minimum(growthrates_zeromissing), nothing, nothing, nothing, 0.0),
   maxval=(1e6, nothing, nothing, nothing, 1e8),
)
display(output.page)
output.running = false
sim!(output, fullruleset; tspan=tspan)
```
