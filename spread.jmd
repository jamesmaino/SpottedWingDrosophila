---
title : Dispersal.jl example
author : Rafael Schouten
---

# Dispersal simulations
In this example we will run a simulation of the spread of the Spotted Winged

Drosophila _D. suzukii_ accross the continental USA.

### GTK window

Set up a simple rule that just copies the growthrate layer to a grid so that
we can view it next to the simulation.

```{julia; results=hidden}
tspan = DateTime(2020, 1), DateTime(2021, 1)
```
Run the simulation in a DynamicGridsGtk window:

```{julia; results=hidden}
using DynamicGridsGtk
output = GtkOutput((population=populationgrid,);
    store=true,
    fps=50,
    processor=inferno,
    minval=zero(carrycap),
    maxval=carrycap,
)
output.running = false
#files = "output/tiffs/" .* readdir("output/tiffs")
#i = 821
#GDALarray(files[i]; selectorcrs=EPSG(4326)) |> plot
#lon, lat = parse.(Float64, match(r"cells_invaded_from_incusion_(.*)_(.*).tif", files[i]).captures)
lon, lat = 153.01867219917017, -30.311826034712713
populationgrid .= 0
populationgrid[Lon(Contains(lon)), Lat(Contains(lat))] = carrycap
sim!(output, dispersalruleset; init=(population=populationgrid,), tspan=tspan);
```
And save it as a gif:

```{julia; results=hidden}
savegif(joinpath(basedir, "output/dispersal.gif"), output; fps=30)
```

Now with replicates:

```{julia; results=hidden}
#reps = 1:10 # simulation replicate
#initreps = [deepcopy(init) for i in 1:10]
#output = GtkOutput(init; ps=10, store=true, processor=jet, minval=0.0, maxval=carrycap)
#output.running = false
#output.fps = 300
#sim!(output, multiruleset; tspan=tspan, nreplicates=10);
```


### Interactive web outputs

```{julia; results=hidden}
# using DynamicGridsInteract
# output = InteractOutput(init, fallarmyworm;
                        # minval=minimum(0.0), maxval=carrycap, timestep=timestep,
                        # fps=10, store=true, processor=jet, slider_throttle=1.0)
# display(output)
# output.running = false
# sim!(output, fallarmyworm; tspan=tspan)
```


## Mapping incursion-point sensitivity

We will look at plotting some likely scenarios where incursion occurs
at a major port, then model all possible incursion scenarios.

Set up the simulation:

```{julia; results=hidden}
starttime = DateTime(2020, 1)
stoptime = DateTime(2022, 1)
tspan = starttime, stoptime
trange = starttime:timestep:stoptime
init = zero(populationgrid)
output = ArrayOutput(init, length(trange))
nreps = 100
```
Set up the output grid (which can be smaller than the sim to save time)
Now make some pathway plots for some key incursion points.

And generate the plot.

```{julia; results=hidden
function incursionplot(output, init, missingmask, key, (lat, lon), nreps, tspan, timestep)
    println(key)
    len = length(tspan[1]:timestep:tspan[2])
    init[:population] .= 0
    init[:population][Lat(Contains(lat)), Lon(Contains(lon))] = carrycap
    steps_established = similar(output[1][:population], Int)
    steps_established .= 0
    @set! steps_established.refdims = ()
    @set! steps_established.name = "Months established"
    for rep in 1:nreps
        sim!(output, dispersalruleset; init=init, tspan=tspan)
        println("rep: ", rep)
        map(output) do step
            steps_established .+= step[:population] .>= 1
        end
    end
    println("maximum: ", maximum(steps_established))
    plot(steps_established ./ nreps .* missingmask; color=:inferno, xlabel="", ylabel="", title=key)
end
```

```{julia; results=hidden}
init = (population=zero(populationgrid),)
output = ArrayOutput(init, length(trange))
plots = []
for (key, loc) in zip(keys(incursionpoints), incursionpoints)
    push!(plots, incursionplot(output, init, missingmask, key, loc, nreps, tspan, timestep))
end
```

```{julia; results=hidden}
plot(plots...; size=(1000, 600))
savefig("output/months_established.png")
```

We can also save the plots as individual figures.

```{julia; results=hidden}
for (i, key) in enumerate(keys(incursionpoints))
    plot(plots[i])
    savefig("output/months_established_$key.png")
end
```


Now loop over all locations and reps to create grid where the value of each cell
reflects the mean number of cells invaded for an incursion commenced at that cell.


```{julia; results=hidden}
nreps = 1 #
scale = 2
cellsinvaded6 = GeoData.aggregate(populationgrid, scale=scale)
@set! cellsinvaded6.name = "Cells invaded"
cellsinvaded12 = deepcopy(cellsinvaded6)
init = deepcopy(populationgrid)
tspan_summer = DateTime(2020, 1), DateTime(2021, 1)
tspan_winter = DateTime(2020, 7), DateTime(2021, 7)
init = zero(populationgrid)
```

Then loop over the aggregated grid:

```{julia; results=hidden}
rm("output/tiffs"; recursive=true)
mkdir("output/tiffs")
build_plots!(cellsinvaded6, cellsinvaded12, dispersalruleset, init, boolmask, missingmask, nreps, scale, tspan, timestep, season) = begin
    londim, latdim = dims(init, (Lon, Lat))
    latindex = reverse(val(latdim))
    trange = tspan[1]:timestep:tspan[2]
    Threads.@threads for i = 1:scale:size(cellsinvaded12, 1) * scale
        output = ArrayOutput(init, length(trange))
        acc = similar(init, UInt8)
        acc .= 0
        @set! acc.missingval = 0x00
        threadinit = deepcopy(init)
        for j = 1:scale:size(cellsinvaded12, 2) * scale
            boolmask[i, j] || continue
            checkbounds(Bool, acc, i, j) || continue
            lat, lon = ArchGDAL.reproject([[londim[j], latindex[i]]], crs(init), selectorcrs(init))[1]
            acc .= 0
            threadinit .= 0
            threadinit[i, j] = carrycap
            invaded6 = 0
            invaded12 = 0
            for k in 1:nreps
                sim!(output, dispersalruleset; init=threadinit, tspan=tspan)
                invaded6 += count(x -> x > one(x), output[7])
                count12 = count(x -> x > one(x), output[13])
                invaded12 += count12
                acc .+= output[13] .> 0
            end
            cellsinvaded6[(i - 1) ÷ scale + 1, (j - 1) ÷ scale + 1] = invaded6 / nreps
            cellsinvaded12[(i - 1) ÷ scale + 1, (j - 1) ÷ scale + 1] = invaded12 / nreps
            if invaded12 > 0
                println("plot: ", (lat, lon))
                println(maximum(acc))
                GeoData.write("output/tiffs/cells_invaded_from_$(lon)_$(lat)_$season.tif", GDALarray, acc)
            end
        end
    end
end
@time build_plots!(cellsinvaded6, cellsinvaded12, dispersalruleset, init, boolmask, missingmask, nreps, scale, tspan_summer, timestep, "summer")
@time build_plots!(cellsinvaded6, cellsinvaded12, dispersalruleset, init, boolmask, missingmask, nreps, scale, tspan_winter, timestep, "winter")
```

Now plot:

```{julia; results=hidden}
area12 = cellsinvaded12 .* 9*9*1e-6 .* GeoData.aggregate(missingmask, scale=scale)
plot(area12; colorbar_title="Area invaded from incursion pt. (million km²)", title="Area invaded after 12 months")
savefig("output/cellsinvaded_12months_$(nreps)reps.png")
area6 = cellsinvaded6 .* 9*9*1e-6 .* GeoData.aggregate(missingmask, scale=scale)
plot(area6; colorbar_title="Area invaded from incursion pt. (million km²)", title="Area invaded after 6 months")
savefig("output/cellsinvaded_6months_$(nreps)reps.png")
```

And save the output:

```{julia; results=hidden}
using NCDatasets
write("output/cellsinvaded_6months_$(nreps)reps.ncd", NCDarray, cellsinvaded6)
write("output/cellsinvaded_12months_$(nreps)reps.ncd", NCDarray, cellsinvaded12)

A = NCDarray("output/cellsinvaded_12months_$(nreps)reps.ncd")
A = NCDarray("output/cellsinvaded_6months_$(nreps)reps.ncd")
plot(A)
```
