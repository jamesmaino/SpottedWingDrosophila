
Now experiment with different trapping regimes.

```{julia; results=hidden}
using Distributions, DataFrames, CSV
```

First write a function to build a randomised trapping grid

```{julia; results=hidden}
# TODO use detectionsites!
function build_trappinggrid(cropval, traps_per_cell)
    trappinggrid = similar(cropval, Int8)
    for i in eachindex(trappinggrid)
        trappinggrid[i] = cropval[i] > 0 ? rand(Poisson(traps_per_cell)) : 0
    end
    return trappinggrid
end
```

Then define a method to determine the area invaded at the (randomised)
point of detection:

```{julia; results=hidden}
p_detection(detection_rate_m, popdens, ntraps; trap_coverage = 2.7) =
    1 - ((1 - detection_rate_m)^ntraps)^(popdens * trap_coverage)

function area_at_detection(output, trappinggrid, detection_per_timestep, gridsize)
    gridarea = gridsize[1] * gridsize[2]
    for f in eachindex(output), cell in eachindex(output[f][:population])
        popdens = output[f][:population][cell] / gridarea # flies per ha
        trapnumber = trappinggrid[cell]
        trapnumber == 0 || popdens == 0 && continue

        p = p_detection(detection_per_timestep, popdens, trapnumber, trap_coverage = 2.7)
        # Return after first randomised detection
        if rand(Binomial(1, p)) == 1
            return (f, sum(output[f][:population] .> 0) * gridarea)
        end
    end
    # Not detected
    return (missing, missing) # not detected
end
```

Finally, define the function to running replicate simulations with
different trapping grids.

```{julia; results=hidden}
function trapping_reps!(areaoutput, ruleset, init, location, tspan,
    initsize, traps_per_cells, detection_per_timestep, gridsize, simreps, surveillancereps)
    simlen = length(tspan[1]:ruleset.timestep:tspan[2])
    init_popgrid!(init[:population], incursionpoints[location], initsize)
    output = ArrayOutput(init, simlen)
    for i = 1:simreps
        sim!(output, ruleset; init=init, tspan=tspan)
        for j = 1:length(traps_per_cells)
            for k = 1:surveillancereps
                println((simrep=i, traps=j, surveilancrep=k))
                trappinggrid = build_trappinggrid(cropvalue, traps_per_cells[j])
                areaoutput[i, j, k] = area_at_detection(output, trappinggrid, detection_per_timestep, gridsize)
                println(areaoutput[i, j, k])
            end
        end
    end
end
```

```{julia; results=hidden}
simreps = 10
traps_per_cells = 1 ./ 10 .^ (-1:0.1:1)
surveillancereps = 10
starttime = DateTime(2021, 1)
stoptime = DateTime(2023, 1)
timestep = dispersalruleset.timestep
tspan = starttime, stoptime
detections = 0.0052 # mean rate of detection for 93 m trapping radius from Kirkpatrick 2018 across mean([27, 48]) = 37.5 d
surveylen = 37.5u"d"
utimestep = 365.25u"d" / 12
detection_per_timestep = detections / surveylen * utimestep
gridsize = 9, 9

const TupleOrMissingTuple = Union{Tuple{Missing,Missing},Tuple{Float64,Float64}}

areaoutputs = [
    TupleOrMissingTuple[(-1.0, -1.0) for i = 1:simreps, j = 1:length(traps_per_cells), k = 1:surveillancereps] for loc in keys(incursionpoints)
]

initsize = carrycap / 1000
```

Now we will organise the data into a DataFrame that we can save
as a CSV, and plot. We calculate min an max area curves using
the standard deviation.

This will take a while to run.


```{julia; results=hidden}
for i in 1:length(incursionpoints)
    trapping_reps!(areaoutputs[i], dispersalruleset, (population=populationgrid,), keys(incursionpoints)[i], tspan,
        initsize, traps_per_cells, detection_per_timestep, gridsize, simreps, surveillancereps)
end

df = DataFrame(
    [Symbol,Float32,Float32,Float32,Float32,Float32],
    [:location, :time, :traps_per_cell, :timesd, :area, :areasd],
    length(traps_per_cells) * length(incursionpoints)
)

for j in eachindex(traps_per_cells), loc in 1:length(incursionpoints)
    location = keys(incursionpoints)[loc]
    println((location, j))
    detection_time = map(x->x[1], areaoutputs[loc][:,j,:])
    area_invaded = map(x->x[2], areaoutputs[loc][:,j,:])
    j2 = j + (loc - 1) * length(traps_per_cells)
    df[j2, :location] = location
    df[j2, :location] = location
    df[j2, :traps_per_cell] = traps_per_cells[j]
    df[j2, :time] = mean(skipmissing(detection_time))
    df[j2, :timesd] = std(skipmissing(detection_time))
    df[j2, :area] = mean(skipmissing(area_invaded))
    df[j2, :areasd] = std(skipmissing(area_invaded))
end
```

And plot the results:

```{julia; results=hidden}
plot(df.traps_per_cell, (df.area);
   # ribbons=df.areasd,
    #ylims=(0, 1.3e5),
    xlabel="Traps per 9km² cell",
    ylabel="Area invaded at detection (km²)",
    label="Simulation mean",
)
```

```{julia; results=hidden}
savefig("output/trapping_efficacy_initdiv1000")
CSV.write("output/trapping_efficacy_initdiv1000.csv",  df)
# data = CSV.read("output/simulation_summary.csv")
```
